<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ar.js on 頑張らないために頑張る</title>
    <link>https://ysko909.github.io/tags/ar.js/</link>
    <description>Recent content in Ar.js on 頑張らないために頑張る</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>© Copyright ysko</copyright>
    <lastBuildDate>Sat, 21 Nov 2020 10:31:39 +0900</lastBuildDate>
    
	<atom:link href="https://ysko909.github.io/tags/ar.js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ペルソナ玲音を召喚するARをA-Frameで作る</title>
      <link>https://ysko909.github.io/posts/make-ar-with-a-frame-and-gltf/</link>
      <pubDate>Sat, 21 Nov 2020 10:31:39 +0900</pubDate>
      
      <guid>https://ysko909.github.io/posts/make-ar-with-a-frame-and-gltf/</guid>
      <description>作ったもの ペルソナ玲音を召喚するARを、A-Frameを使って実装しました。今回はマーカーに依存しないマーカーレスなARで、任意の座標にペルソナ玲音の3Dモデルが「浮いている」ARを実装してみることにします。
マーカーベースなARじゃないです 前述しましたが、今回はマーカーレスなARです。
マーカーベースなARは「3Dモデルを召喚する」手法としては王道ですが、ユーザーにURLを渡しただけでは動作しません。何らかの方法で、ユーザーにマーカーを準備させなければならないのが難点です。名刺とかにマーカーを印刷してURLと一緒に渡すなど、フィジカルなものを利用すれば手段がないわけではありません。とはいえ、ネット上でのみやり取りする際にはこの方法が使えないため、やっぱりマーカーの分どうしても手間は増えます。
その点、マーカーレスなARはユーザーにURLさえ渡せばすぐ動作するのが最大のメリット。SNSなどにURLだけ掲載しておけば、あとはユーザーにブラウザ経由でアクセスさせるだけです。場合によっては、SNSアプリの内部ブラウザでは動作しないケースがありますが、そこはChromeやFirefoxでアクセスするよう誘導すれば問題ありません。JSによるwebARの実装である以上、現状では3DoFでしか実現できない（XYZ軸の回転のみ検出する）のが難点ですが、そこはアイデアで乗り切るしかありません。あとは、ブラウザとライブラリの進化に期待するしか・・・（他力本願
ペルソナ玲音の3Dモデルについて ペルソナ玲音の3Dモデルは、MagicaVoxelとBlenderを利用し自作しました。モデルの形式ですが、今回はglTFを利用します。glTFだとモーションまで含んだ3Dモデルとして扱えるため、ただ3Dモデルが「そこにある」だけでなく「動く」ので、UXの観点から非常に有利です。
3Dモデルの作り方は割愛しますが、簡単に紹介すると下記のような手順で動く3Dモデルを作成可能です。というか、これ書くだけで1つ記事ができそうな内容ではあるのでちょっと割愛しないとテキスト量が大変なことに＿(　_´ω`)_ﾍﾟｼｮ
 MagicaVoxelでボクセルモデルを作成する。 objファイルとしてエクスポートする。 エクスポートしたファイル一式をZIPで圧縮する。 MixAmoにアクセスし好きなモーションを付与する。 MixAmoのメニューからFBX形式でダウンロードする。 Blenderで新規プロジェクトを作成し、ダウンロードしたFBXをインポートする。 3Dモデルのサイズや位置、角度などを必要に応じて調整する。 glTF形式でエクスポートする。  ちなみに、MixAmoからダウンロードする際は、FBX形式じゃなくてもBlenderにはインポートできると思いますが、とりあえずFBXを選択しておけば問題ないと思います。
実際のコード 実際に記述したコードは下記のHTMLソースだけです。HTMLと3Dモデルだけ準備すればARが実装できるのは、本当にA-Frame様様ですね。
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script src=&amp;#34;https://aframe.io/releases/1.0.4/aframe.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;https://jeromeetienne.github.io/AR.js/aframe/build/aframe-ar.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/gh/donmccurdy/aframe-extras@v6.1.1/dist/aframe-extras.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;a-scene embedded arjs=&amp;#34;debugUIEnabled:false;&amp;#34; renderer=&amp;#34;gammaOutput: true;&amp;#34; vr-mode-ui=&amp;#34;enabled: false&amp;#34;&amp;gt; &amp;lt;a-assets&amp;gt; &amp;lt;a-asset-item id=&amp;#34;model&amp;#34; src=&amp;#34;persona_lain_blender.glb&amp;#34;&amp;gt;&amp;lt;/a-asset-item&amp;gt; &amp;lt;/a-assets&amp;gt; &amp;lt;a-entity scale=&amp;#34;100 100 100&amp;#34; position=&amp;#34;0 0.4 -3&amp;#34; animation-mixer=&amp;#34;clip:*&amp;#34; gltf-model=&amp;#34;#model&amp;#34; visible=&amp;#34;true&amp;#34;&amp;gt; &amp;lt;/a-entity&amp;gt; &amp;lt;a-light type=&amp;#34;ambient&amp;#34; color=&amp;#34;#ffffff&amp;#34;&amp;gt;&amp;lt;/a-light&amp;gt; &amp;lt;a-light type=&amp;#34;point&amp;#34; intensity=&amp;#34;2&amp;#34; position=&amp;#34;0 4 0&amp;#34;&amp;gt;&amp;lt;/a-light&amp;gt; &amp;lt;/a-scene&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 本来、glTFやFBXをそのまま3DモデルとしてAR空間上に出現させる場合、A-Frame単体では実現できません。じゃあどうしているかというと、A-Frame extrasという、A-Frameの拡張機能を利用します。このアドオンを導入することで、glTFの実装が可能になります。</description>
    </item>
    
  </channel>
</rss>