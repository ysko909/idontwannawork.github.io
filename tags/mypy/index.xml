<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mypy on 頑張らないために頑張る</title>
    <link>https://ysko909.github.io/tags/mypy/</link>
    <description>Recent content in Mypy on 頑張らないために頑張る</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>© Copyright ysko</copyright>
    <lastBuildDate>Wed, 14 Jun 2023 00:16:55 +0900</lastBuildDate>
    
	<atom:link href="https://ysko909.github.io/tags/mypy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pythonにおける型アノテーションとmypyによる型チェック</title>
      <link>https://ysko909.github.io/posts/type-annotation-in-python-and-type-checking-with-mypy/</link>
      <pubDate>Wed, 14 Jun 2023 00:16:55 +0900</pubDate>
      
      <guid>https://ysko909.github.io/posts/type-annotation-in-python-and-type-checking-with-mypy/</guid>
      <description>動的型付け言語のおさらい ご存じの通り、Pythonは動的型付け言語ですので、関数や変数などのオブジェクトに対して型の宣言を強制することはありません。動的型付け言語では、値自体に型情報が含まれており、変数には固定された型情報が存在しません。
hoge = 123 fuga = &amp;#39;ham&amp;#39; ここでは変数hogeに数値が、fugaには文字列が格納されています。
hoge = 123 hoge = &amp;#39;ham&amp;#39; 先述の通り、Pythonのような動的型付け言語では、変数には型情報が付与されません。そのため、上記のようなコードもエラーになりません。
一方、静的型付け言語であるC言語やJavaでは、変数hogeの宣言時に型情報を指定します。
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; int hoge(int num) { return num * 2; } int main() { char str[BUFSIZ]; sprintf(str, &amp;#34;%d&amp;#34;, hoge(3)); printf(&amp;#34;%s&amp;#34;, str); return 0; } たとえばC言語だと、上記のように関数や変数の宣言時に型を指定します。
そのため、先述のPythonコードの例において、もし変数hogeに数値型であるという型情報が付与されている場合、文字列を代入しようとする行でエラーが発生するわけです。
型が想定と違ったら def piyo(foo): return foo * 2 上記の例だと、関数piyo()は引数を取りそれを2倍した結果を返しています。その実装から推測すると、引数fooはおそらく数値が入ることを前提としているように見えます。
ところが、関数piyo()の引数に文字列を入れても動作します。つまり、本来想定しているであろう型以外の型を代入することが可能です。たとえば真偽値とかリストとか辞書とか。これって大丈夫？
もちろん、大丈夫ではありません。しっかり実行時にエラーを吐きます。
ただし、エラーを吐かないケースもあります。
&amp;gt;&amp;gt;&amp;gt; def piyo(foo): ... return foo*2 ... &amp;gt;&amp;gt;&amp;gt; piyo(13) 26 &amp;gt;&amp;gt;&amp;gt; piyo(&amp;#39;hoge&amp;#39;) &amp;#39;hogehoge&amp;#39; &amp;gt;&amp;gt;&amp;gt; piyo([&amp;#39;a&amp;#39;, &amp;#39;bc&amp;#39;, 3]) [&amp;#39;a&amp;#39;, &amp;#39;bc&amp;#39;, 3, &amp;#39;a&amp;#39;, &amp;#39;bc&amp;#39;, 3] &amp;gt;&amp;gt;&amp;gt; piyo({&amp;#39;ham&amp;#39;: 10, &amp;#39;eggs&amp;#39;: 20, &amp;#39;spam&amp;#39;: 30}) Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 2, in piyo TypeError: unsupported operand type(s) for *: &amp;#39;dict&amp;#39; and &amp;#39;int&amp;#39; 上記の例ですと、文字列やリストはとりあえず結果が返ってきます。ただ、辞書などはエラーになります（これは後述）。</description>
    </item>
    
  </channel>
</rss>