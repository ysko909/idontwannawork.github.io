<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unity on 頑張らないために頑張る</title>
    <link>https://ysko909.github.io/tags/unity/</link>
    <description>Recent content in Unity on 頑張らないために頑張る</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>© Copyright ysko</copyright>
    <lastBuildDate>Sat, 24 Sep 2022 00:38:38 +0900</lastBuildDate>
    
	<atom:link href="https://ysko909.github.io/tags/unity/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TopDown engineを使って見下ろし型のゲームを作る（２）〜インストールからテンプレートの実行まで〜</title>
      <link>https://ysko909.github.io/posts/develop-game-with-topdown-engine-series-2/</link>
      <pubDate>Sat, 24 Sep 2022 00:38:38 +0900</pubDate>
      
      <guid>https://ysko909.github.io/posts/develop-game-with-topdown-engine-series-2/</guid>
      <description>概要 TopDown Engine（以下、TDE）のデモは、四角いデモ用プレイヤーがPrefabとしてインポートされています。このデモ用プレイヤーを、自作したプレイヤーに置き換えるのが今回の内容です。
実際にゲームを作成する場合は、このデモ用プレイヤーを自作のスプライトシートなどから作成したプレイヤーに変更するか、既存のAssetなどをインポートすることになるでしょう。新規のオブジェクトとしてインポート・アタッチする場合、アタッチ時点でオブジェクトをPrefab化してあると扱いが楽なので、ここではPrefab化してからアタッチすることとします。
手順 TDEをインポートする インポートの方法は以前の別記事で触れているとおりなので、ここでは割愛します。
シーンを作成する Minimal2Dのテンプレートを用いてシーンを作成します。具体的な手順は以前の別記事で触れているので、ここでは割愛します。
ここではAssetsフォルダ下に「topdown」というフォルダを新規作成し、コピーしてきたシーンを「MainGameScene」という名前にリネームして保存しましました。一度このタイミングでゲームを実行してみて、正常に動作することを確認しておくと良いでしょう。WASDでテンプレートのデモ用キャラクターを動かせるので、試してみると吉。以降は、基本的にこのシーンを編集することになります。
自作アセットをインポートする ここでは、プレイヤー用オブジェクトのために自作したスプライトシートをインポートします。
ここではAssetsフォルダ配下にキャラクター用スプライトシートのフォルダを新規作成し、その中にスプライトシートをインポートしました。
スプライトシートを編集する インポートした直後のスプライトシートは、Inspectorウィンドウを見るとTexture Typeが「Default」になっている（はず）なので、この設定を「Sprite（2D and UI）」に変更します。さらに、今回のスプライトシートは32x32のスプライトを集めたものなので、32x32で各スプライトごとに切り分けておきます。
Sprite Modeを「Multiple」に、Pixels Per Unitを32に変更してApplyしてから、Sprite Editorを使ってスプライトの切り分けを行います。
おなじみのSprite Editorではいつもの設定「Grid by Cell size」で32x32に設定、Sliceボタンを押してスプライトを切り分けます。正常に切り分けられたらApplyします。
スプライトの切り分けが終わると、Projectウィンドウのオブジェクトに三角の書かれた丸いアイコンが、スプライトシートの右側に表示されます。
このアイコンをクリックすると、切り分けた各スプライトがそれぞれ個別に表示されます。ここまで来ればスプライトシートの編集は終わりです。本来だと切り分けたスプライトを組み合わせてアニメーションの設定などを行ったりするのですが、ここではスプライトシートの導入だけとしておきます。
スプライトシートをシーンに追加する 切り分けたスプライトシートをシーンに追加します。このとき、追加するのにドラッグアンドドロップする先はHierarchyウィンドウ一択であることに注意です。スプライトシートをSceneウィンドウのドラッグアンドドロップしてはいけません。Sceneウィンドウに対しドラッグアンドドロップしてスプライトシートを追加すると、追加と同時にアニメーションの設定を行うファイルを生成しようとします。
上記のようなウィンドウが表示されたとき、Saveを押すとアニメーション用のファイルが生成されます。それだけなら支障はあまりないのですが、追加したスプライトシートにAnimatorコンポーネントが自動的に追加されます。このコンポーネントがオブジェクトに付与されていると、あとでTDEにオブジェクトをアタッチするときにエラーが発生します。一応エラーを回避する方法もあるのですが、最初からエラーの遠因となるような要素はなるべく除外しておきたいので、ここではHierarchyウィンドウに対してオブジェクトを追加するようにしましょう。
一番下のオブジェクトが、先ほど切り分けたスプライトシートをドラッグアンドドロップして追加したプレイヤー用オブジェクトです。
Inspectorウィンドウを見ると、Animatorコンポーネントが追加されていないことがわかります。
プレイヤーオブジェクトにTDEのコンポーネントを追加する TDEには、プレイヤーキャラクター用の各種設定が可能なコンポーネントを用意しています。便利なことに、このコンポーネントを付与して多少の設定を行うだけでプレイヤー移動などの基本的な操作が可能になります。
先ほど追加したプレイヤー用オブジェクトを選択し、Inspectorウィンドウの「Add Component」をクリックします。
ここでは検索窓に「chara」などと入力して、「Character」コンポーネントを選択します。このコンポーネントが、TDEによって用意されたプレイヤーやNPC用のコンポーネントです。
Characterコンポーネントを付与すると、「Autobuild」という項目が用意されます。これは、表示されている各種ボタンをおすことで、そのオブジェクトに対して「2D（or3D）のプレイヤー（orNPC）に必要な各種コンポーネントの付与や設定」を自動的にやってくれる便利機能です。ここでは対象がプレイヤー用の2Dオブジェクトなので「Autobuild Player Character 2D」を押す。
ボタンを押すと、Colliderなどのオブジェクトに必要なコンポーネントが付与され、デフォルト値が設定されます。
付与されるコンポーネントが多いため、設定できる要素はかなり多いです。が、ここでは基本的にデフォルト値を採用します。例外として、「Ridibody 2D」配下にある「Interpolate」という設定項目はNoneに設定しておきます（デフォルト値はInterpolate）。
レイヤー設定を行う TDEのシーンには、もともと基本的なレイヤー設定が準備されています。
Sprite RendererのAdditional SettingsにあるSorting Layerを見ると、すでに背景用やキャラクター用のレイヤーが存在しています。追加したオブジェクトはたいていの場合、これらの準備されたレイヤーを設定してやればいいはずです。
ここでは追加したオブジェクトがプレイヤーであるため、Sorting Layerを「Character」に設定します。Order in Layerは、同一レイヤー内に複数のオブジェクトが存在する場合に指定すればいいでしょう。現状では追加したオブジェクト以外には同一レイヤー内に他オブジェクトが存在しないため、ここでは設定せずデフォルト値の0をそのまま採用します。
ゲームを実行してみる ここまでの段階で一度試しにゲームを実行してみます。
この時点で、スプライトシートをベースにしたオブジェクトを追加した以外はもとのシーンをそのまま採用しているので、シーンに設定されているデモ用プレイヤー（黄色い四角いヤツ）も表示されています。デモ用プレイヤーと自作したプレイヤーはどちらもWASDキーで移動できるはずなので、試しに動かしてみます。多分移動するスピードなどが異なるはずですが、それはあとで調整できるのでここでは気にしなくて大丈夫です。Fキーを押すと一瞬ダッシュします。
Prefab化してLevel Managerに設定する TDEではプレイヤーをPrefab化して、そのPrefabをLevel Managerに設定することを推奨しています。現状ではHierarchy直下にプレイヤーのオブジェクトが存在しているため、ここではPrefab化してLevel Managerに設定します。
プレイヤーのオブジェクトを、HierarchyウィンドウからProjectウィンドウにドラッグアンドドロップします。Hierarchyウィンドウのプレイヤーオブジェクトが青くなったら、そのオブジェクトはPrefab化できています。
プレイヤーのPrefabは、後々のためにPrefabだとわかるようリネームしておくと良いでしょう。Prefab化が完了したら、Hierarchyウィンドウにいるプレイヤーオブジェクトは不要なので削除しておきます。
次にHierarchyウィンドウでManagerを選択します。
配下にLevel Managerがいるはずなので選択し、Inspectorウィンドウを参照します。</description>
    </item>
    
    <item>
      <title>TopDown engineを使って見下ろし型のゲームを作る（１）〜インストールからテンプレートの実行まで〜</title>
      <link>https://ysko909.github.io/posts/develop-game-with-topdown-engine-series-1/</link>
      <pubDate>Tue, 16 Aug 2022 08:45:06 +0900</pubDate>
      
      <guid>https://ysko909.github.io/posts/develop-game-with-topdown-engine-series-1/</guid>
      <description>概要 TopDown engineとは、Unityで「見下ろし型（TopDown）」ゲームを作成するためのアセットです。3D、2D問わず利用可能ですが、見下ろし型というゲームの形式上2Dのほうが直感的にわかりやすいでしょう。
なお、同じデベロッパーが開発している有名なエンジンでCorgi Engineがあります。こっちはいわゆる2D横スクロールアクションゲームを作るためのエンジンです。
今回からは、このTopDown Engineを使ったゲーム開発を行います。とはいえ、この1記事では言及できないほどの機能や設定を備えているので数回に分けて書いていきます。数回で終わるんかな？_(┐「ε:)_
なにはともあれインストール 基本的には、普段のUnityにおける新規作成の手順に準拠しています。違いは、新規作成した直後のプレーンな状態のプロジェクトに、TopDown Engineをインポートすることです。既存のプロジェクトにインポートする場合、競合を避けるため少なくとも（存在するなら）古いTopDown Engineのフォルダを最初に削除することをオススメします。
また、TopDown Engineが機能するためにいくつかのアセットと依存関係にあります。インポート時にエラーが発生することは考えられますが、これ自体はオフィシャル曰く「通常のこと」らしいです。エラーが出た場合は、こことかを参考にしつつインポートを進めることになると思います。
今回はインストール時を含め、発生したエラーは基本的に掲載する方向で記事を作成しています。ただし、当方の環境では発生しなかったと言って、別の環境で発生する可能性がないわけではないので、そのあたりはご了承ください。
環境 念の為、記事作成時点でも環境をメモしておきます。
 macOS 11.6.8 Unity 2021.3.1f1 TopDown Engine 3.0  新規プロジェクトを作成する まずは、Unity Hubでいつもどおり新規プロジェクトを作成します。ここはいつもどおり。
ここでは2Dを選択しています。名称は適当に「TopDown」としました。
アセットのインポート 新規プロジェクトが立ち上がったらTopDown Engineを追加します。メニュー「Window」＞「Package Manager」を選択します。
Package Managerの画面は、起動した直後だとPackageの欄が「In Project」になっているはず。
Packageを「My Assets」に変更すると、購入済みのアセットが一覧になって表示されるはず。表示されない場合はUnityエディタのコンソールを確認します。
上記のようにエラーメッセージが出ていることがあります。今回は「1回サインアウトしてから再度サインインしてね」とメッセージが表示されているので、そのとおりに従います。
正常にサインインできていれば、上記のように購入済みのアセットが表示されるはず。TopDown Engineが表示されているはずなので、選択して右下のDownloadボタンを押してからImportボタンを押します。ダウンロード済みの場合は最初からImportボタンが押せます。
「本当にインポートしていいの？」と聞かれるので、Importボタンを押します。
上記のようなメッセージが表示された場合は、Install/Upgradeボタンを押します。
今度は、TopDown Engineのどのコンポーネントをインポートするか選択するウィンドウが表示されます。基本的には全部インポートするので、そのままImportボタンを押せばOKです。あとはインポートが終わるまでしばらく待ちます。そこそこ時間がかかる（5分くらい？）なので、軽く休憩でも取りましょう。
インポートが終わると、Assetsフォルダの中にTopDown Engineのフォルダが作成されています。このフォルダには各種デモが格納されています。その中の「LevelSelection」というフォルダ内にあるSceneを実行すると、各種デモを選択できる画面が表示されます。
上記スクショは、LevelSelectionのSceneファイルをダブルクリックして選択した様子。ここからゲームを実行してみます。
任意のゲームを選択すると、自動的にシーンが切り替わってゲームが開始されます。ゲーム実行中にEscキーを押すと左側にメニューが表示され、LevelSelection画面に戻れます。
 WASD、上下左右キー：上下左右に移動 Space：ジャンプ、キャラクターとの会話 I：装備選択画面 マウスポインタ：照準の方向 マウス左ボタン：弾の発射 F：ダッシュ E：攻撃  デモゲーム本体でのキー操作は上記の通りです。なお、ゲームによってキー設定が異なっており、使えるキーと使えないキーが存在します。
それと、現状だと当方の環境では「KoalaProcedural」というデモゲームを実行しようとするとエラーが表示されます。
Tilemap Generator : you need to specify a Tile to paint with.</description>
    </item>
    
    <item>
      <title>Unityで他のゲームオブジェクトを参照する方法</title>
      <link>https://ysko909.github.io/posts/find-game-object-in-unity/</link>
      <pubDate>Sun, 24 Apr 2022 19:44:59 +0900</pubDate>
      
      <guid>https://ysko909.github.io/posts/find-game-object-in-unity/</guid>
      <description> 概要 Unityのスクリプトは、「アタッチされているゲームオブジェクトの参照」だけではなく、同一のシーンに存在していてスクリプトがアタッチされていないゲームオブジェクトについても参照が可能です。方法はいくつかあります。
 GameObject.Find()を用いて名称からゲームオブジェクトを参照する。 GameObject.FindGameObjectWithTag()を使用する。 public Gameobject Hogeと宣言し、Inspectorウィンドウにて参照先のゲームオブジェクトを指定する。  それぞれのメリットやデメリットについて見てます。
手法別に見てみる GameObject.Find()を用いる あるシーンにて「Hoge」という名前のゲームオブジェクトがあるとします。ここで言う「名前」とは、Hierarchyウィンドウで表示されている文字列とします。
上記の場合、Main CameraやCM vcam1のことを指します。これらの名称を用いて、参照したいゲームオブジェクトを指定するのがGameObject.Find()です。
GameObject hoge = GameObject.Find(&amp;#34;Hoge&amp;#34;); 上記の方法で参照すれば、以降は変数hogeを使ってゲームオブジェクトに対し処理が可能になります。Hierarchyウィンドウ上で表示されている名称をコードでそのまま指定できるので、取得したいオブジェクトが直感的に指定できることが最大の強みです。
注意点は、この処理動作が重めであること。Update()の中で何回も実行するのは避けて、Start()の中で変数に確保しておくべきでしょう。
GameObject.FindGameObjectWithTag()を用いる Unityはゲームオブジェクトに対して「Tag」を指定できます。Tagとは、1つ以上のゲームオブジェクトに対して割り当てることができる参照ラベルです。たとえば、プレイヤーが制御するオブジェクトには「Player」を、プレイヤーが制御しないNPCについては「NPC」を定義できます。他に、あるシーン内で獲得できるさまざまなアイテムについては、「Item」というタグを定義できるでしょう。
このように設定されたタグは、スクリプトによるゲームオブジェクト参照時に役立ちます。たとえばNPC全体に対して何らかの処理を行いたい場合、すべてのNPCオブジェクトを個別に指定するのは大変ですが、NPCに対しタグを設定していれば「NPCというタグを持つオブジェクト」という簡単な指定で処理対象を限定できます。
GameObject player = GameObject.FindGameObjectWithTag(&amp;#34;Player&amp;#34;); 上記では、「Player」というタグがついたゲームオブジェクトを参照しています。
ただし、GameObject.FindGameObjectWithTag()が利用できるのは対象のゲームオブジェクトが1つの場合です。1つのタグが複数のゲームオブジェクトに設定されている場合、GameObject.FindGameObjectsWithTag()を利用します。非常に似たメソッド名ですが、複数のゲームオブジェクトを検索できるほうはGameObjectsと複数形のメソッド名になっています。
GameObject[] items = GameObject.FindGameObjectsWithTag(&amp;#34;Item&amp;#34;); GameObject.FindGameObjectsWithTag()は、戻り値が配列になっているため代入する変数も配列で宣言する必要がある点に注意。
Inspectorウィンドウにて参照先のゲームオブジェクトを指定 スクリプト内で宣言したパブリック変数は、Inspectorウィンドウで値を設定できます。これを利用し、ゲームオブジェクトをパブリック変数として宣言しておいて、Inspectorウィンドウで参照先のゲームオブジェクトを直接指定する方法があります。複数指定するのは手間ですが、1つ2つくらいならこの方法で指定しても良いかもしれません。
Find()メソッドなどを用いるケースとは異なり、対象のゲームオブジェクトをInspectorウィンドウで指定しているため、参照先を検索する処理を実行する必要がありません。つまり、動作が軽いことこそ、この方法の最大のメリットです。それと、Find()などのメソッドは参照先が非アクティブの場合指定できません。ですが、この方法はアクティブあるいは非アクティブに関係なく、とりあえず存在さえしていれば指定可能です。アクティブかどうかを考慮する必要がないことも、この方法のメリットの1つです。
あるスクリプトで上記のようにパブリック変数を宣言します。
すると、先ほどのスクリプトがアタッチされているゲームオブジェクトを選択した際に表示されるInspectorウィンドウで、スクリプトで宣言したパブリック変数に対してどんなオブジェクトをアタッチするかの項目が増えます。この枠に、参照したいオブジェクトをアタッチしてやればいいわけです。
デメリットとしては、スクリプトだけ見ると具体的にどんなオブジェクトがアタッチされているかがはっきりしないことです。ただ、これはコメントで参照先をメモしておくなどすれば、一応は回避できます。それと、参照したい先を手動設定するため、対象が複数あるとだと手間なのも割と大きめなデメリット。この場合は、ゲームオブジェクトにタグを付けて管理したほうがいいでしょう。
まとめ Unityにおいて、ゲームオブジェクトを参照する方法は複数存在しますが、それぞれについてメリットとデメリットが存在します。うまく使い分けたいものです。
参考  GameObject.Find GameObject.FindGameObjectsWithTag タグ 【Unity】スクリプトでオブジェクトを見つける ゲームオブジェクトの取得 How can I reference to a component of another gameobject?  </description>
    </item>
    
    <item>
      <title>UnityでVscode使おうとしたらOmnisharpがエラー吐いたけどアップデートしたら直った</title>
      <link>https://ysko909.github.io/posts/unity-vscode-omnisharp-error/</link>
      <pubDate>Mon, 11 May 2020 00:42:40 +0900</pubDate>
      
      <guid>https://ysko909.github.io/posts/unity-vscode-omnisharp-error/</guid>
      <description>UnityのエディタをVS Codeに変えた UnityではC#を編集する際、もともとVisual Studio Communityを使うのですが、使い慣れたVisual Studio Code（以下、VS Code）でコーディングしたかったので、Unity側の設定を変えたんです。
そうしたら 問題発生。
おい、なんかエラー（Warning？）吐いてるぞ。
とりあえず「Show Output」で内容を確認してみます。
[fail]: OmniSharp.MSBuild.ProjectLoader The reference assemblies for .NETFramework,Version=v4.7.1 were not found. To resolve this, install the Developer Pack (SDK/Targeting Pack) for this framework version or retarget your application. You can download .NET Framework Developer Packs at https://aka.ms/msbuild/developerpacks [fail]: OmniSharp.MSBuild.ProjectManager Attempted to update project that is not loaded:/hoge/hoge/... 「.NETFramework v4.7.1が見つからないぞ！」って言われてるな・・・。これ単体でインストールが必要とかって聞いたことないぞ。っていうか、Macなんだからいらないよな、これ。
解決策は王道のアップデート 王道はアップデートだよね、ってことでVisual Studio Community側の更新を行いました。しばらくUnity触ってなかったから、随分バージョンも古くなってしまっていたようで・・・。
合計するとそこそこファイルサイズが大きいので、なかなかダウンロードするのにも時間がかかりました。
そうしたら。
[info]: OmniSharp.MSBuild.ProjectManager Update project: Assembly-CSharp 直ってる？</description>
    </item>
    
    <item>
      <title>Unity Hubを使ってUnityをインストールする</title>
      <link>https://ysko909.github.io/posts/install-unity-with-unity-hub/</link>
      <pubDate>Thu, 11 Jul 2019 16:41:00 +0900</pubDate>
      
      <guid>https://ysko909.github.io/posts/install-unity-with-unity-hub/</guid>
      <description>Unityって何さ Unity
 世界で最も広くつかわれているゲーム開発エンジン。 様々な機能を備えたエディターと、業界で最も幅広いプラットフォームへのサポートを利用して、ゲームやインタラクティブなコンテンツを制作する方法を学びましょう。
 「ゲーム開発エンジン」とは、画面描写、効果音やBGMなどの音楽管理、ステータスなどの各種データ管理などを総合して開発できる環境のこと。ただ、昨今ではゲームだけでなく映像制作にも用いられてますし、3Dに強いという特徴を生かして建築設計にも活用されているようです。すげぇ。
2Dを多用した映像制作ではちょっとアレかもしれませんが、3Dがメインならリアルタイムで3Dレンダリングが可能なUnityの強みを活用できそうです。Unityオフィシャルを始めとしてナレッジも多いですし、販売されているテキストも充実しているのも、Unityの強みかもしれません。
何はともあれ、まずは環境を整備しようと思います。今回はインストールについて。
環境  macOS Mojave 10.14.5  なお、インストールする対象はUnity 2019.1版とします。
エディション Unityには現在（2019年7月10日）エディションが3パターン存在します。
   名称 月額 条件     Personal 無料 収入ならびに資金調達（自己資金を含む）の合計が年間10万ドルを超えない場合   Pro with Teams Advanced 15,000円 条件なし   Plus ～3000円 個人・法人問わず、年間収益ならびに資金調達（自己資金を含む）の合計が20万米ドル以下の場合    エディション構成あるいは月額は、ある程度のスパンで更新されると思うので、Unityオフィシャルを参照していただくことを強くオススメします。
とりあえずここでは、Personalエディションを選択します。
インストール手順 Unityは基本的に直接インストーラーをダウンロードせず、Unity Hubと呼ばれるソフトを経由してインストールします。まずはそのUnity Hubをインストールするところから。
Unity Hubのダウンロード Unityオフィシャルから「はじめる」をクリックします。
プランが表示されます。ここではPersonalを選択します。
「利用規約および〜」の部分にチェックを入れると、ボタンが活性化されてUnity Hubのダウンロードができるようになります。
ダウンロードしたらインストールします。MacへのインストールはApplicationsのフォルダーにコピーするだけです。
ダウンロードするUnityの選択 Unity Hubのインストールが終わったら、起動します。
この状態ではまだUnity本体はインストールされていません。ダウンロードもされていません。そこで、左の「インストール」をクリックします。
右上の「インストール」ボタンをクリックします。すると現時点（2019年7月）でインストールが可能なバージョンの一覧が表示されます。
とくにこだわりがなければ最新の安定版をインストールします。
一緒にインストールするモジュールの選択 本体のバージョンを選択し「次へ」をクリックすると、今度は本体と同時にインストールするモジュールを選択できます。自分は「Android Build Support」「iOS Build Support」の2つを選択しました。とくに深い意味はありません。なんとなく必要になりそうだな・・・と思ったので。なお、Dev toolsのVisual Studio for Macは最初から選択されています。</description>
    </item>
    
  </channel>
</rss>