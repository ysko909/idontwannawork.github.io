<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on 頑張らないために頑張る</title>
    <link>https://ysko909.github.io/tags/git/</link>
    <description>Recent content in Git on 頑張らないために頑張る</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>© Copyright ysko</copyright>
    <lastBuildDate>Wed, 10 Jan 2024 23:19:23 +0900</lastBuildDate>
    
	<atom:link href="https://ysko909.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>他ブランチからファイルをコピーする</title>
      <link>https://ysko909.github.io/posts/copy-files-from-other-branch/</link>
      <pubDate>Wed, 10 Jan 2024 23:19:23 +0900</pubDate>
      
      <guid>https://ysko909.github.io/posts/copy-files-from-other-branch/</guid>
      <description> 概要 たまに「任意のブランチに、他ブランチからファイルをコピーしたいなー」という場面があります。
たとえば、GitHub Pagesで公開するためにgh-pagesブランチにビルド済みのファイルのみ置いておきたい、という場合がそうでしょうか。この場合、mainブランチではビルド前のソースコードやアセット用ファイルなどの他に、npmやyarnでビルドしたビルド済みファイルがあると思います（これらのファイルやフォルダが.gitignoreの対象だったら、この限りではない）。gh-pagesブランチには、このビルド済みのファイルだけが必要なので、mainブランチから必要な分だけのファイルをコピーしたいわけです。
ここでは、別ブランチからファイルをコピーするときの手順についてメモしておきます。
コピー手順 ここで想定している操作としては、「任意のブランチに対して、mainブランチからファイルをコピーする」です。つまり、これから紹介する手順だと、mainブランチがコピー元になります。
別ブランチにファイルをコピーするには、git checkoutを利用します。一応、いったんコピー前にファイルのアドレスなどをgit showを使って確認しておいた方が良いと思います。
 任意のブランチを新規作成する。 作成したブランチに切り替える。 git showコマンドでコピー元のファイルのアドレスを確認する。 git checkoutコマンドでファイルを新しいブランチにコピーする。 変更をコミットする。  ざっくり手順を書き出すと上記のようになります。このように、git checkoutを使ったファイルのコピーは、今いるブランチがコピー先になるのでこの点は注意が必要です。
任意のブランチを新規作成する git checkout -b new_branch おなじみの、ブランチを作成するコマンドを実行します。これで新規ブランチが作成できます。
作成したブランチに切り替える git checkout new_branch コピー先である、新規ブランチに移動します。
git showコマンドでコピー元のファイルのアドレスを確認する いったんコピー元のファイルについて、その在り処を確認しておきます。「もう場所もファイル名もバッチリわかってるぜ！」という場合は、この手順を飛ばしてしまってもいいと思います。
git show main:path/to/file1 git show main:path/to/file2  コピー元ブランチ名:ファイルパスの形式で指定します。
上記のコマンドを実行すると、指定したファイルの内容が表示されます。このとき、参照する対象についてファイルでなくフォルダを指定した場合は、そのフォルダに格納されているファイルの一覧が表示されます。
git checkoutコマンドでファイルを新しいブランチにコピーする いよいよ別ブランチからファイルをコピーしてきます。
git checkout main -- path/to/file1 path/to/file2 git checkoutを利用し、前の手順で確認したファイルパスを指定します。
上記を実行すると、現在のブランチにフォルダ構造ごとファイルがコピーされます。ファイル単体だけでなく、フォルダ構成もコピー対象であることに注意です。上記であれば、path/to/file1というフォルダ構成で現在のブランチにコピーされます。
もし、現在のブランチではコピー元とは別のフォルダ構成にしたい場合、いったんコピーしたあとでフォルダを新規作成しファイルを移動するなどして、フォルダ構成を変更する必要があります。ここだけは若干面倒かもしれません。
変更をコミットする git commit -m &amp;#34;Add some files from main&amp;#34; 現在のブランチでの変更をコミットします。これで今までの操作が当ブランチに反映されました。
参考  git show git checkout Git で特定のブランチからファイルをコピーする  </description>
    </item>
    
    <item>
      <title>GitHubからRepository not found.と言われたらキーチェーンを見てみよう</title>
      <link>https://ysko909.github.io/posts/can-not-access-to-github-with-git/</link>
      <pubDate>Mon, 11 May 2020 22:02:34 +0900</pubDate>
      
      <guid>https://ysko909.github.io/posts/can-not-access-to-github-with-git/</guid>
      <description>Macの話なんですけどね Missing or invalid credentials. Skip silent fetch commands remote: Repository not found. ある日、いつもの通りブログをチョロっと書いてGitHubのリポジトリにpushしようとしたら、「Repository not found.」とか言われたわけです。リポジトリがないよ、って言っているわけですね。
ないわけないだろ。
ないわけないじゃないですかやだー つい最近作ったばっかりだったら「リポジトリ名間違えたかなー」とか思うわけですけど、もう何ヶ月も同じリポジトリ使ってるわけで、稼働実績があるリポジトリなわけです。だから、「リポジトリが見つからないよ」って言われたところで、そんなわけないだろってなるわけです。
エラーのメッセージをよくよく見てみると「リポジトリないよ」って言っている前にMissing or invalid credentials.って言ってるんですよね。認証情報のエラーなんだけど、認証情報を入力できない。
リポジトリを作ってはじめてpullとかする場合、認証画面が表示されたりコンソールなら入力を求められるはずです。それすら表情されない。あれ、これって結構重症？
Macのキーチェーンアクセスを見てみる GitHubに限りませんが、Macの場合認証情報をキーチェーンアクセスというアプリケーションで管理しています。ここに格納されているGitHub用の認証情報がコケてるんじゃね？
というわけでおもむろに確認してみます。
アプリケーションからユーティリティのフォルダを開いて、その中の「キーチェーンアクセス」をクリックします。すると保持している認証情報の一覧が表示されます。
ウィンドウの右上にある検索窓へ「GitHub」と入力します。するとGitHub用の認証情報が表示されるはずです。
表示されたら、そいつは削除します。右クリックメニューから削除を選択します。
きれいサッパリ削除が完了したのを確認したら、キーチェーンアクセスは閉じて構いません。
さあどうだ おもむろにgit pullしてみます。
$ git pull Username for &amp;#39;https://github.com&amp;#39;: というわけで、認証情報の入力を求められました。再度正しい情報を入力すれば、また普段どおりpullやpushが実行できるようになります。
まとめ とくに何か特別な作業をやった記憶はないのですが、たまにこういうことも起こり得るようです。というわけで、なにかのお役に立てば幸いです。</description>
    </item>
    
    <item>
      <title>Visual Studio CodeでGitが見つからないと言われたら</title>
      <link>https://ysko909.github.io/posts/fix-git-path-with-vscode/</link>
      <pubDate>Sun, 07 Jul 2019 17:14:15 +0900</pubDate>
      
      <guid>https://ysko909.github.io/posts/fix-git-path-with-vscode/</guid>
      <description>VS Codeをアップデートしたらこんなメッセージが Visual Studio Code(以下、VS Code)をアップデートしたらこんな通知が出るようになりました。
「Gitが見つからないよ！」って・・・いや、君今までしこたまGit使ってたじゃないか。
理由はともかく、このままではGitの各種コマンドが利用できないので、設定します。
環境  macOS Mojave 10.14.5 Visual Studio Code version 1.36  設定手順  左下の歯車マークから、あるいはCommand + ,で「Settings」画面を表示します。
 出てきた画面に「git.path」と入力します。すると、「Settings.jsonで設定してね」と言われるのでSettings.jsonを開きます。
ごちゃごちゃしてますが、下のところに&amp;quot;git.path&amp;quot;: &amp;quot;/usr/bin&amp;quot;を追記しました。なお、gitのパスはコンソール画面にてwhich gitすればわかります。
 編集が終わったら保存します。これで完了です。なお、いつのバージョン以降からかは失念しましたが、設定の変更を行ってもVS Codeを再起動する必要はなく即時反映されます。
  （番外編）XcodeをインストールしたらなぜかGitが使えないぞ XcodeをインストールしたらGitが使えなくなりました。なんかライセンス契約に同意する必要があるみたいです。
指示に従いコマンド発行および同意を行ったら、Gitが再び利用できるようになりました。
$ git --version Agreeing to the Xcode/iOS license requires admin privileges, please run “sudo xcodebuild -license” and then retry this command. $ sudo xcodebuild -license You have not agreed to the Xcode license agreements.</description>
    </item>
    
  </channel>
</rss>